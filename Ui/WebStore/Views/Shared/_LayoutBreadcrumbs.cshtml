@using WebStore.DomainNew.ViewModels
@{
   Layout="_Layout";


var type=Context.Request.Query.ContainsKey("sectionId")
       ? BreadCrumbType.Section
        : Context.Request.Query.ContainsKey("brandId")
        ? BreadCrumbType.Brand
        : BreadCrumbType.None;

    var fromType=BreadCrumbType.Section;

  if((string)ViewContext.RouteData.Values["action"]=="ProductDetails")
   {
    type=BreadCrumbType.Item;
}
                   var id=0;
             switch (type)
            {
              case BreadCrumbType.None:
              break;
              case BreadCrumbType.Section:
             id=int.Parse(Context.Request.Query["sectionId"].ToString());
             break;
              case BreandCrumbType.Breand:
              id=int.Parse(Context.Request.Query["brandId"].ToString());
               break;
              case BreadCrumbType.Item:
              if(Context.Request.Query.ContainsKey("fromBrand"))
               {
                  fromType=BreadCrumbType.Brand;
                 }
                  id=int.Parse(ViewContext.RouteData.Values["id"].ToString());
                   break;
                  default:
                  throw new ArgumentOutOfRangeException();
         }
}



@(await @Component.InvokeAsync("BreadCrumbs", new{type,id,fromType}))


@RenderBody()